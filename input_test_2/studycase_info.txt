Each location (es. prosumer_1) has a list of technologies. Each technology has its parameters as this info explain.
During hourly simulations, technologies are used to solve energy balances one at a time following the order dictated by the parameter "priority".

"electricity* demand":  "serie": str name of the serie in input/loads from wich the hourly demand have to be read

"hydrogen demand":      "serie": str name of the serie in input/loads from wich the hourly demand have to be read
						"strategy": str 'supply-led' or 'demand-led'. 
							-'supply-led': hydrogen is produced regardless of demand, maximising production potential of location and delivering hydrogen at a constant rate. Storage is retrospectively sized.
								hydrogen_demand.csv still have to be included in structure. It doesn't influence energy balances. Can be useful as comparison of production with a desired hourly production output and annual balance. 
							-'demand-led': hydrogen is produced based on actual user consumption and hydrogen-chain components interactions. 

"electricity* grid":    "draw": bool, true if the carrier can be withdrawn from the grid
                        "feed": bool, true if the carrier can be feed into the grid

*or hydrogen, heating water, gas, process steam

"PV": 	"tilt": float surface tilt [deg]
		"azimuth": float azimuth angle 0 = south, 180 = north [deg]
		"losses": float losses in cables, inverters (if this technoly is not considered in your simulation), dirt (sometimes snow), over the years loss of power, shading [%]
		"Max field width": float >0 - optional
		"Max field length": float >0 - optional
		"peakP": float peak DC power [kWp] 
		"serie": "TMY" or INT [2005-2016] or file.csv if "TMY" production serie based on typical meteorological year is used
              		if INT [2005-2016] the PV serie of the specific year is used 
			if "filename.csv" a different serie can be used (upload it in input/production)
               		 "filename.csv" must be the hourly time series of PV production 8760 values [Wh]
                	 in this case 'peakP', 'azimuth' and 'tilt' are ignore
		"owned": bool, true if plant is owned by the location. Overall CAPEX & OPEX included in economic analysis.
					   false if plant is not owned by the location. Only the purchased electricity from the farm is taken into consideration in the economic analysis.
		
"wind": "model": "simple", "betz", "detailed"
		"serie": file.csv production series based on availability of resource in the selected location. Works only with "simple" model.
		"Npower": float nominal power of the wind farm [kW]
		"owned": bool, true if plant is owned by the location. Overall CAPEX & OPEX included in economic analysis.
					   false if plant is not owned by the location. Only the purchased electricity from the farm is taken into consideration in the economic analysis.

"inverter":	"max efficiency": float 0-1 
            	"peakP": float peak power of a single inverter
            	"number": int number of inverters

"battery": 	"nominal capacity": float [kWh]
		"max E-rate": 0-1 float charging and discharging rate related to maximum capacity [kW/kWh]
		"efficiency": float charge and discharge efficiency
		"ageing": true or false
		"life cycles": int number of life cycles to reach the end of battery life
		"end life capacity": float maximum capacity left at end of life [%]
		"collective": 0 or 1 0: no collective rules. 1: priority to collective self consumption and then charge or discharge the battery.

"electrolyzer": "Npower": float nominal power of one module [kW] 
				"number of modules": int
				"stack model": str 'Enapter 2.1' or 'McLyzer 800' or 'PEM General' 
				"strategy": str "hydrogen-first" or "full-time"
						-"hydrogen-first":  Electrolyzers working only when renewable energy is available, prioritizing production of hydrogen over electricity production from RES
						-"full-time": Electrolyzers operational 24/7, grid connection must be present
				"only_renewables": bool, true if electrolyzer intended to work only on renewables
				"minimum_load": 0-1 float [%], if specified, minimum load the electrolyser must operate at

"fuel cell": 	"Npower": float nominal power of one module [kW]
		"number of modules": int
		"stack model": str "PEM General" or 'SOFC' or 'FCS-C5000'
		"ageing" : true or false
		
"mechanical compressor":{"P_out": float output pressure [bar]
                         "P_in": float input pressure [bar]
                         "T_in": float input temperature [K]
                         "compressor model": str "simple compressor",	"normal compression", "compression with refrigeration", "multistage compressor with refrigeration"
                         "fluid": str "Hydrogen", "Air"
                         "pressure losses IC": float [%]
                         "T_IC": float intecoolers temperature [K]
                         "n_stages": int,

"H tank": 	"max capacity": float [kg] or bool false if "supply-led" mode is activated
			"pressure": float storage pressure [bar]

"heatpump":     "type": 1 = air-water (other types not yet implemented...)
                "nom Pth": float [kW] nominal condition: t_amb=5° t_out=35° 6000 rpm
                "t rad heat": loat [C°] temperature of radiant system in heating mode
                "inertial TES volume": thermal energy storage float [lt]
             	"inertial TES dispersion": float [W/m2K]
				"PV surplus": true or false allow to use PV surplus to charge inertial_TES
                "REC surplus": true or false allow to use REC PV surplus to charhe intertial_TES

"boiler_xx":    "Ppeak": float [kWp]
		"efficiency": 0-1